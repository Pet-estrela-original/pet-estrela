/**
 * @fileoverview Firestore Security Rules for Pet Memorial Profiles.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access pet memorial profiles associated with their own user ID.
 *
 * Data Structure:
 * All pet memorial profile data is nested under /users/{userId}/pet_memorial_profiles/{profileId}.
 *
 * Key Security Decisions:
 * - User's can only manage their own memorial profiles.
 * - No public listing of profiles is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures pet memorial profiles, ensuring only the owning user can manage them.
     * @path /users/{userId}/pet_memorial_profiles/{profileId}
     * @allow (create) - User 'user123' creates a new pet memorial profile under their ID.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { id: 'user123', petName: 'Buddy', ... }
     * @allow (get) - User 'user123' reads an existing pet memorial profile under their ID.
     *   - request.auth.uid: 'user123'
     * @allow (update) - User 'user123' updates an existing pet memorial profile under their ID.
     *   - request.auth.uid: 'user123'
     * @allow (delete) - User 'user123' deletes an existing pet memorial profile under their ID.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User 'user456' attempts to create a profile under user 'user123''s ID.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data: { id: 'user123', petName: 'Buddy', ... }
     * @deny (get) - User 'user456' attempts to read a profile under user 'user123''s ID.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/pet_memorial_profiles/{profileId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}